// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// euclideanDistance
double euclideanDistance(NumericVector u, NumericVector v);
RcppExport SEXP _dpmclust_euclideanDistance(SEXP uSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(euclideanDistance(u, v));
    return rcpp_result_gen;
END_RCPP
}
// euclideanDistances
NumericVector euclideanDistances(NumericMatrix u, NumericVector v);
RcppExport SEXP _dpmclust_euclideanDistances(SEXP uSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(euclideanDistances(u, v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dpmclust_euclideanDistance", (DL_FUNC) &_dpmclust_euclideanDistance, 2},
    {"_dpmclust_euclideanDistances", (DL_FUNC) &_dpmclust_euclideanDistances, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_dpmclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
